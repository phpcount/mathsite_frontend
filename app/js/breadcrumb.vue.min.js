"use strict";

function _continueIgnored(value) {
  if (value && value.then) {
    return value.then(_empty);
  }
}

function _empty() {}

function _catch(body, recover) {
  try {
    var result = body();
  } catch (e) {
    return recover(e);
  }

  if (result && result.then) {
    return result.then(void 0, recover);
  }

  return result;
}

function _async(fn) {
  return function () {
    var args = Array.prototype.slice.call(arguments, 0);

    try {
      return Promise.resolve(fn.apply(this, args));
    } catch (e) {
      return Promise.reject(e);
    }
  };
}

function _await(input, then, direct) {
  if (direct) {
    return typeof then === 'function' ? then(input) : input;
  }

  if (typeof then === 'function') {
    return Promise.resolve(input).then(then);
  } else {
    return Promise.resolve(input);
  }
}

/**
 * Author: Viktor Boyko
 * Version: 0.1
 */
// breadcrumb
Vue.component('breadcrumb-data', {
  props: ['breadcrumb', 'index', 'mark', 'len'],
  template: "\n    <span  v-html=\"addRoute(breadcrumb)\" property=\"itemListElement\" typeof=\"ListItem\">\n      <meta property=\"position\" content=\"breadcrumb.position\">\n    </span>\n    ",
  methods: {
    addMark: function addMark(index) {
      var marker = index < this.len - 1 ? this.mark : '';
      return marker;
    },
    addRoute: function addRoute(obj) {
      var response,
          meta = '<span property="name">' + obj.name + '</span>',
          tag = 'a'; //default tag

      if (obj.item !== undefined && obj.item !== "") {
        response = '<' + tag + ' property="item" typeof="WebPage" href="' + obj.item + '"' + (obj.target ? "target=_blank" : "") + '>' + meta + '</' + tag + '>';
      } else {
        tag = 'span';
        response = '<' + tag + ' property="item" typeof="WebPage">' + meta + '</' + tag + '>';
      }

      var responseWithMark = response + this.addMark(this.index);
      return responseWithMark;
    }
  }
}); // Vue Apps [breadcrumb]

var app1 = new Vue({
  el: '#v-breadcrumb',
  data: {
    // Setting component
    breadcrumb: true,
    // Status
    load: false,
    message: "Test",
    mark: " " + "â†’" + " ",
    // For init start render template
    breadcrumbList: [{
      "itemListElement": []
    }],
    urls: {
      news: 'http://localhost:3002/routes'
    }
  },
  methods: {
    lenObj: function lenObj(obj) {
      if (obj[0].itemListElement !== undefined) {
        var len = Object.keys(obj[0].itemListElement).length;
        return len;
      } else {
        return false;
      }
    },
    getRoutes: _async(function () {
      var _this = this;

      return axios.get(_this.urls.news);
    })
  },
  mounted: _async(function () {
    var _this2 = this;

    var cookie = $.cookie('session-key');
    var url = "http://localhost:3002/events_user?session-key=" + cookie;
    return _await(axios.get(url).then(function (response) {
      _this2.breadcrumb = response.data[0].breadcrumb;
    }), function () {
      return _continueIgnored(_catch(function () {
        return _await(_this2.getRoutes(), function (resp) {
          if (resp.status == 200) {
            console.log('%cStatus: ' + resp.status + ', data successfully loaded', 'color: #43852f');
            _this2.load = true;
            _this2.breadcrumbList = [];

            _this2.breadcrumbList.push(resp.data);
          } else {
            console.log(resp.status);
          }
        });
      }, function (err) {
        console.error("Error loading json obj on url: " + _this2.urls.news + ' name: ' + err.name);
      }));
    });
  })
});